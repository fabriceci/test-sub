[gd_scene load_steps=16 format=2]

[ext_resource path="res://src/Scenes/Levels/Main.gd" type="Script" id=1]
[ext_resource path="res://assets/environment/background.png" type="Texture" id=2]
[ext_resource path="res://assets/environment/midground.png" type="Texture" id=3]
[ext_resource path="res://src/Scenes/Objects/Mine.tscn" type="PackedScene" id=4]
[ext_resource path="res://src/Scenes/Objects/Player.tscn" type="PackedScene" id=5]
[ext_resource path="res://assets/lights/light.png" type="Texture" id=6]
[ext_resource path="res://assets/lights/ray.png" type="Texture" id=7]
[ext_resource path="res://assets/environment/waterPlant2.png" type="Texture" id=8]
[ext_resource path="res://icon.png" type="Texture" id=9]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

// Gonkee's water shader for Godot 3 - full tutorial https://youtu.be/uhMAHpV_cDg
// If you use this shader, I would prefer if you gave credit to me and my channel

uniform vec4 blue_tint : hint_color;

uniform vec2 sprite_scale;
uniform float scale_x = 0.67;

float rand(vec2 coord){
	return fract(sin(dot(coord, vec2(12.9898, 78.233)))* 43758.5453123);
}

float noise(vec2 coord){
	vec2 i = floor(coord);
	vec2 f = fract(coord);

	// 4 corners of a rectangle surrounding our point
	float a = rand(i);
	float b = rand(i + vec2(1.0, 0.0));
	float c = rand(i + vec2(0.0, 1.0));
	float d = rand(i + vec2(1.0, 1.0));

	vec2 cubic = f * f * (3.0 - 2.0 * f);

	return mix(a, b, cubic.x) + (c - a) * cubic.y * (1.0 - cubic.x) + (d - b) * cubic.x * cubic.y;
}

void fragment(){
	
	vec2 noisecoord1 = UV * sprite_scale * scale_x;
	vec2 noisecoord2 = UV * sprite_scale * scale_x + 4.0;
	
	vec2 motion1 = vec2(TIME * 0.3, TIME * -0.4);
	vec2 motion2 = vec2(TIME * 0.1, TIME * 0.5);
	
	vec2 distort1 = vec2(noise(noisecoord1 + motion1), noise(noisecoord2 + motion1)) - vec2(0.5);
	vec2 distort2 = vec2(noise(noisecoord1 + motion2), noise(noisecoord2 + motion2)) - vec2(0.5);
	
	vec2 distort_sum = (distort1 + distort2) / 60.0;
	
	vec4 color = textureLod(TEXTURE, UV + distort_sum, 0.0);
	
	COLOR = color;
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/blue_tint = null
shader_param/sprite_scale = null
shader_param/scale_x = 0.67

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

// Gonkee's water shader for Godot 3 - full tutorial https://youtu.be/uhMAHpV_cDg
// If you use this shader, I would prefer if you gave credit to me and my channel

uniform vec4 blue_tint : hint_color;

uniform vec2 sprite_scale;
uniform float scale_x = 0.67;

float rand(vec2 coord){
	return fract(sin(dot(coord, vec2(12.9898, 78.233)))* 43758.5453123);
}

float noise(vec2 coord){
	vec2 i = floor(coord);
	vec2 f = fract(coord);

	// 4 corners of a rectangle surrounding our point
	float a = rand(i);
	float b = rand(i + vec2(1.0, 0.0));
	float c = rand(i + vec2(0.0, 1.0));
	float d = rand(i + vec2(1.0, 1.0));

	vec2 cubic = f * f * (3.0 - 2.0 * f);

	return mix(a, b, cubic.x) + (c - a) * cubic.y * (1.0 - cubic.x) + (d - b) * cubic.x * cubic.y;
}

void fragment(){
	
	vec2 noisecoord1 = UV * sprite_scale * scale_x;
	vec2 noisecoord2 = UV * sprite_scale * scale_x + 4.0;
	
	vec2 motion1 = vec2(TIME * 0.3, TIME * -0.4);
	vec2 motion2 = vec2(TIME * 0.1, TIME * 0.5);
	
	vec2 distort1 = vec2(noise(noisecoord1 + motion1), noise(noisecoord2 + motion1)) - vec2(0.5);
	vec2 distort2 = vec2(noise(noisecoord1 + motion2), noise(noisecoord2 + motion2)) - vec2(0.5);
	
	vec2 distort_sum = (distort1 + distort2) / 60.0;
	
	vec4 color = textureLod(TEXTURE, UV + distort_sum, 0.0);
	
	COLOR = color;
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/blue_tint = null
shader_param/sprite_scale = Vector2( 2, 2 )
shader_param/scale_x = 1.04

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;

// Gonkee's water shader for Godot 3 - full tutorial https://youtu.be/uhMAHpV_cDg
// If you use this shader, I would prefer if you gave credit to me and my channel

uniform vec4 blue_tint : hint_color;

uniform vec2 sprite_scale;
uniform float scale_x = 0.67;

float rand(vec2 coord){
	return fract(sin(dot(coord, vec2(12.9898, 78.233)))* 43758.5453123);
}

float noise(vec2 coord){
	vec2 i = floor(coord);
	vec2 f = fract(coord);

	// 4 corners of a rectangle surrounding our point
	float a = rand(i);
	float b = rand(i + vec2(1.0, 0.0));
	float c = rand(i + vec2(0.0, 1.0));
	float d = rand(i + vec2(1.0, 1.0));

	vec2 cubic = f * f * (3.0 - 2.0 * f);

	return mix(a, b, cubic.x) + (c - a) * cubic.y * (1.0 - cubic.x) + (d - b) * cubic.x * cubic.y;
}

void fragment(){
	
	vec2 noisecoord1 = UV * sprite_scale * scale_x;
	vec2 noisecoord2 = UV * sprite_scale * scale_x + 4.0;
	
	vec2 motion1 = vec2(TIME * 0.3, TIME * -0.4);
	vec2 motion2 = vec2(TIME * 0.1, TIME * 0.5);
	
	vec2 distort1 = vec2(noise(noisecoord1 + motion1), noise(noisecoord2 + motion1)) - vec2(0.5);
	vec2 distort2 = vec2(noise(noisecoord1 + motion2), noise(noisecoord2 + motion2)) - vec2(0.5);
	
	vec2 distort_sum = (distort1 + distort2) / 60.0;
	
	vec4 color = textureLod(TEXTURE, UV + distort_sum, 0.0);
	
	COLOR = color;
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )
shader_param/blue_tint = null
shader_param/sprite_scale = Vector2( 2, 2 )
shader_param/scale_x = 1.42

[node name="Aqua" type="Node2D"]
script = ExtResource( 1 )

[node name="ParallaxBackground" type="ParallaxBackground" parent="."]

[node name="ParallaxLayer" type="ParallaxLayer" parent="ParallaxBackground"]
modulate = Color( 0.278431, 0.278431, 0.278431, 1 )
motion_scale = Vector2( 0.05, 0.05 )
motion_offset = Vector2( -150, 0 )
motion_mirroring = Vector2( 512, 512 )

[node name="background" type="Sprite" parent="ParallaxBackground/ParallaxLayer"]
position = Vector2( 4.07678, -4.07672 )
texture = ExtResource( 2 )
centered = false
region_enabled = true
region_rect = Rect2( 0, 0, 1152, 512 )

[node name="ParallaxLayer2" type="ParallaxLayer" parent="ParallaxBackground"]
modulate = Color( 0.411765, 0.411765, 0.411765, 1 )
motion_scale = Vector2( 0.15, 0.15 )
motion_offset = Vector2( -100, 0 )
motion_mirroring = Vector2( 960, 512 )

[node name="midground" type="Sprite" parent="ParallaxBackground/ParallaxLayer2"]
texture = ExtResource( 3 )
centered = false

[node name="Mine" parent="." instance=ExtResource( 4 )]
position = Vector2( 204.701, 203.896 )
size = "small"

[node name="Mine2" parent="." instance=ExtResource( 4 )]
position = Vector2( 254.701, 155.896 )
size = "normal"

[node name="Mine3" parent="." instance=ExtResource( 4 )]
position = Vector2( 265.701, 90.896 )
size = "big"

[node name="Player" parent="." instance=ExtResource( 5 )]
position = Vector2( 135.201, 114.896 )

[node name="Camera2D" type="Camera2D" parent="Player"]
current = true
zoom = Vector2( 0.6, 0.6 )
limit_left = 0
limit_top = 0
smoothing_enabled = true

[node name="Light2D" type="Light2D" parent="Player"]
position = Vector2( -0.539127, -1.22039 )
texture = ExtResource( 6 )
texture_scale = 0.2
energy = 1.3
range_layer_min = -2

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
volume_db = -16.596

[node name="AudioStreamPlayer2" type="AudioStreamPlayer" parent="."]

[node name="CanvasModulate" type="CanvasModulate" parent="."]
color = Color( 0.0666667, 0.0666667, 0.0666667, 1 )

[node name="Exmple3RayShader" type="Light2D" parent="."]
material = SubResource( 2 )
position = Vector2( 383, 118.923 )
rotation = 3.59014
texture = ExtResource( 7 )
energy = 1.7
range_layer_min = -5

[node name="Exemple2Local" type="Sprite" parent="."]
visible = false
material = SubResource( 4 )
position = Vector2( 142.527, 188.948 )
scale = Vector2( 1.58747, 1.57383 )
texture = ExtResource( 8 )

[node name="Exemple1Globale" type="Sprite" parent="."]
visible = false
material = SubResource( 6 )
position = Vector2( 300.36, 195.943 )
scale = Vector2( 9.27974, 6.3832 )
texture = ExtResource( 9 )
